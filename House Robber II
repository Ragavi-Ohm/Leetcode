class Solution {
public:
    int rob(vector<int>& nums) {
        vector<int>nums1(nums.begin(),nums.begin()+nums.size()-1);
        vector<int>nums2(nums.begin()+1,nums.end());
        if(nums.size()==1)
        return nums[0];
        int n1=nums1.size();
        vector<int>dp1(n1+1,-1);
        dp1[0]=nums1[0];
        int pick,nonpick;
        
        for(int i=1;i<n1;i++)
        {
            if(i>1)
            pick=nums1[i]+dp1[i-2];
            else
            pick=nums1[i];
            nonpick=dp1[i-1];
            dp1[i]=max(pick,nonpick);
        }
        int ans1=dp1[n1-1];
        int n2=nums2.size();
        vector<int>dp2(n2+1,-1);
        dp2[0]=nums2[0];
        //inpick,nonpick;
        
        for(int i=1;i<n2;i++)
        {
            if(i>1)
            pick=nums2[i]+dp2[i-2];
            else
            pick=nums2[i];
            nonpick=dp2[i-1];
            dp2[i]=max(pick,nonpick);
        }
        int ans2=dp2[n2-1];


        return max(ans1,ans2);
        
    }
};
