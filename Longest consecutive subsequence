import java.util.*;
import java.lang.*;
class Solution {
   /* static boolean find(int[] nums,int k)
    {
        
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==k)
            {
                return true;
            }
        }
        return false;
        
    }*/
    public int longestConsecutive(int[] nums) {
        
        //Arrays.sort(nums);
        /*int count=0,max=0,flag=0,i;
        for(i=0;i<nums.length-1;i++)
        {
            
            if((nums[i+1]-nums[i])==1)
            {
                /*if(i==0 ||count==0)
                {
                    count=count+2;
                }
                else*/
               /* count=count+1;
                flag=1;
            }
            else
            {
                if(flag==1)
                    count=count+1;
                
                if(max<count)
                    max=count;
                count=0;
                flag=0;
                
            }
        }
        if(flag==1)
            max=count+1;
        if(max==0 && i>=0 && nums.length>0)
            max=1;
        return max;*/
        /*int max=0;
        
        for(int i:nums)
        {
           int curr=i;
           int  count=1;
            while(find(nums,curr+1))
            {
                curr=curr+1;
                count=count+1;
               
            }
            max=Math.max(max,count);
        }
        return max;*/
        Set<Integer> Set = new HashSet<>();
        for(int num: nums){
            Set.add(num);
        }
        
        int seq = 0;
        for(int num: Set){
            if(!Set.contains(num - 1)){
                int curSeq = 1, curVal = num + 1;
                while(Set.contains(curVal)){
                    curSeq++; curVal++;
                } seq = Math.max(seq, curSeq);
            }
        } 
        return seq;
        
        
    }
}
